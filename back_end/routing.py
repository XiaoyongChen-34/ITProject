from flask import jsonify, request
from flask_cors import cross_origin
from config import Config
from utilities import delete_file_if_exists, compare_files
from services import CodeGenerationService
import sys
import random
from library import Library

class RoutingService:
    def __init__(self, app):
        self.app = app
        self.code_gen_service = CodeGenerationService()
        self.clientOption = {"topic": "", "context": ""}
        self.result = {"accuracy": "", "output": ""}
        self.register_routes()

    def register_routes(self):
        @self.app.route('/finishCode', methods=['GET', 'POST'])
        @cross_origin(origins=['http://localhost:5173', 'http://localhost:5173/Problem'])
        def finish_code():
            return self.await_finished_code()

        @self.app.route('/topic', methods=['GET', 'POST'])
        @cross_origin(origins=['http://localhost:5173', "http://localhost:5173/Problem"])
        def topic():
            return self.request_topic()

        @self.app.route('/generate_code', methods=['GET', 'POST'])
        @cross_origin(origins=['http://localhost:5173', "http://localhost:5173/Problem"])
        def generate_code():
            return self.generate_code_route()

    def await_finished_code(self):
        if request.method == 'GET':
            finished_code = request.args.get('code')
            if not finished_code:
                self.result = {"accuracy": "False", "output": "No code received"}
                return self.result
            else:
                finished_code = finished_code.split('$')
                delete_file_if_exists(Config.USERCODE_FILE)
                for line in finished_code:
                    with open(Config.USERCODE_FILE, 'a') as file:
                        file.write(line + '\n')

                with open(Config.FILENAME1, 'r', encoding='utf-8') as file1:
                    example_usage = file1.read().strip()

                with open(Config.USERCODE_FILE, 'r') as file:
                    # Modify finished code into runnable code
                    runnable_code = f"""{file.read()}\nresult = {example_usage}\nprint(result)"""
                    print("This is runnable code:", runnable_code)

                    # Initialize the Library class to get the global context
                    library_instance = Library()
                    global_context = library_instance.get_global_context()

                    with open(Config.USEROUTPUT_FILE, 'w', encoding='utf-8') as file:
                        original_stdout = sys.stdout
                        sys.stdout = file
                        try:
                            exec(runnable_code, global_context)
                        except Exception as e:
                            print(f"Error executing code: {e}")
                        finally:
                            sys.stdout = original_stdout

                # Compare the output of the finished code with the expected output generated by Gemini (will return boolean)
                self.result['accuracy'] = str(compare_files(Config.USEROUTPUT_FILE, Config.OUTPUT_FILE))
                with open(Config.USEROUTPUT_FILE, 'r', encoding='utf-8') as file:
                    self.result['output'] = file.read()
            return self.result

    def request_topic(self):
        if request.method == 'POST':
            frontEndOption = request.json['option']
            with open(Config.TOPIC_FILE, 'w', encoding='utf-8') as file:
                file.write(frontEndOption['topic'])
            with open(Config.CONTEXT_FILE, 'w', encoding='utf-8') as file:
                file.write(frontEndOption['context'])
            self.clientOption['topic'] = frontEndOption['topic']
            self.clientOption['context'] = frontEndOption['context']
            return self.clientOption

    def generate_code_route(self):
        if request.method == 'GET' and request.args.get('topic') and request.args.get('context'):
            self.clientOption['topic'] = request.args.get('topic')
            self.clientOption['context'] = request.args.get('context')
            with open(Config.TOPIC_FILE, 'w', encoding='utf-8') as file:
                file.write(self.clientOption['topic'])
            with open(Config.CONTEXT_FILE, 'w', encoding='utf-8') as file:
                file.write(self.clientOption['context'])

            # Call the generate_code method from the service
            self.code_gen_service.generate_code(
                self.clientOption['topic'], 
                self.clientOption['context'], 
                Config.FILENAME, 
                Config.FILENAME1, 
                Config.FILENAME2, 
                Config.OUTPUT_FILE,
                Config.STATUS_FILE
            )

        with open(Config.STATUS_FILE, 'r', encoding='utf-8') as file:
            status = file.read()
        with open(Config.FILENAME, 'r', encoding='utf-8') as file:
            code = file.read()
        with open(Config.FILENAME2, 'r', encoding='utf-8') as file:
            description = file.read()
        # Append example function call to description
        with open(Config.FILENAME1, 'r', encoding='utf-8') as file:
            description += "\n\n##### Example function call:\n\n"
            description += file.read()
        with open(Config.TOPIC_FILE, 'r', encoding='utf-8') as file:
            topic = file.read()
        with open(Config.CONTEXT_FILE, 'r', encoding='utf-8') as file:
            context = file.read()

        # Split the code and shuffle them
        unshuffledCode = code.split('\n')
        shuffledCode = code.split('\n')
        random.shuffle(shuffledCode)

        return {
            "message": status, 
            "shuffledCode": shuffledCode, 
            "code": unshuffledCode, 
            "description": description, 
            "topic": topic, 
            "context": context
        }
